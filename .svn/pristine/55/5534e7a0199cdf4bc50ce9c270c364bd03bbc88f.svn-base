import React, { useRef, useState, useEffect } from "react"
import { useHistory } from 'react-router-dom';
import { Button, Form, Input, Layout, Select } from "element-react"
import { Carousel } from 'react-bootstrap';
import Fade from "react-reveal/Fade"
import { useDispatch, useSelector } from 'react-redux';
import { actionPropertyUpdate } from "../../redux/actions/property";
import { axiosPost } from "../../services/axios";

const rules = {
  rentStartsDate: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  // monthlyRentPerToken: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  // tokenValue: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  generatedToken: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  propertyType: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  neighborhood: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  squareFeet: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  lotSize: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  bedroomOrBath: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  constructionYear: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  currentStatusOfProperty: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  section8: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  monthlyGrossRent: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  // monthlyCosts: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  // propertyManagementFee: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  // platformFee: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  tax: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  insuranceFee: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  utility: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  assetPrice: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  fee: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  initMaintainanceReserve: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  basic: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  gold: [{ required: true, message: 'This field is required', trigger: 'blur' }],
  premium: [{ required: true, message: 'This field is required', trigger: 'blur' }],
};

const typeOptions = [
  { key: "single", label: "Single Family" },
  { key: "multi", label: "Multiple Family" }
];

const currentStatusOptions = [
  { key: "fully", label: "Fully Rented" },
  { key: "partially", label: "Partially Rented" },
  { key: "not", label: "Not Rented" }
];

const section8Options = [
  { key: "true", label: "Yes" },
  { key: "false", label: "No" },
];

const utilityOptions = [
  { key: 'tenant-paid', label: 'Tenant-Paid always' }
]

const PROPERTY_MANAGEMENT_FEE = 7 / 100.0;
const PROPERTYplatformFee_FEE = 2 / 100.0;

const AdminPropertyUpdate = props => {
  const property = useSelector(state => state.property.currentHouse);

  useEffect(() => {
    console.log('current house', property);
    setForm({
      address1: property.address1,
      address2: property.address2,

      pos_latitude: property.pos_latitude,
      pos_longitude: property.pos_longitude,
      imageData: property.imageData,

      rentStartsDate: property.rentStartsDate ? new Intl.DateTimeFormat('fr-CA', { year: 'numeric', month: '2-digit', day: '2-digit' }).format(new Date(property.rentStartsDate)) : null,
      monthlyRentPerToken: property.monthlyRentPerToken,
      tokenValue: property.tokenValue,
      generatedToken: property.generatedToken,
      propertyType: property.propertyType,
      neighborhood: property.neighborhood,
      squareFeet: property.squareFeet,
      lotSize: property.lotSize,
      bedroomOrBath: property.bedroomOrBath,
      constructionYear: property.constructionYear,
      currentStatusOfProperty: property.currentStatusOfProperty,
      section8: property.section8,

      monthlyGrossRent: property.monthlyGrossRent,
      monthlyCosts: property.monthlyCosts,
      propertyManagementFee: property.propertyManagementFee,
      platformFee: property.platformFee,
      tax: property.tax,
      insuranceFee: property.insuranceFee,
      utility: property.utility,
      assetPrice: property.assetPrice,
      fee: property.fee,
      initMaintainanceReserve: property.initMaintainanceReserve,
      basic: property.basic,
      gold: property.gold,
      premium: property.premium
    });
  }, [property])
  // console.log('propertyid', props.location.state.id);
  const [form, setForm] = useState({
    address1: null,
    address2: null,

    pos_latitude: null,
    pos_longitude: null,
    imageData: null,

    rentStartsDate: null,
    monthlyRentPerToken: null,
    tokenValue: null,
    generatedToken: null,
    propertyType: null,
    neighborhood: null,
    squareFeet: 0,
    lotSize: 0,
    bedroomOrBath: 0,
    constructionYear: null,
    currentStatusOfProperty: null,
    section8: null,

    monthlyGrossRent: 0,
    monthlyCosts: null,
    propertyManagementFee: null,
    platformFee: null,
    tax: 0,
    insuranceFee: 0,
    utility: null,
    assetPrice: 0,
    fee: 0,
    initMaintainanceReserve: 0,
    basic: 3,
    gold: 5,
    premium: 7
  });

  const dispatch = useDispatch();
  const history = useHistory();

  const formRef = useRef();
  const [imgFile, setImgFile] = useState([]);

  const onFormChange = (key, value) => {
    let formClone = Object.assign({}, form);
    formClone[key] = value;
    // console.log('onformchange', value);

    const monthlyGrossRent = key == 'monthlyGrossRent' ? value : formClone['monthlyGrossRent'];

    if (key == 'monthlyGrossRent') {
      formClone['propertyManagementFee'] = (monthlyGrossRent * PROPERTY_MANAGEMENT_FEE).toFixed(2);
      formClone['platformFee'] = (monthlyGrossRent * PROPERTYplatformFee_FEE).toFixed(2);
    } else if (key == 'generatedToken' || key == 'assetPrice') {
      formClone['tokenValue'] = formClone['generatedToken'] != 0 ? (formClone['assetPrice'] / parseFloat(formClone['generatedToken'])).toFixed(2) : null;
    }

    formClone['monthlyCosts'] = - (-formClone['propertyManagementFee'] - formClone['platformFee'] - formClone['tax'] - formClone['insuranceFee']).toFixed(2);
    formClone['monthlyRentPerToken'] = formClone['generatedToken'] != 0 ? (formClone['monthlyCosts'] / formClone['generatedToken']).toFixed(2) : null;


    setForm(formClone);
  }

  const onFileChange = e => {
    if (e.target.files[0])
      setImgFile([...imgFile, e.target.files[0]]);
  }

  const onSubmit = (e) => {
    e.preventDefault();
    formRef.current.validate(valid => {
      // if (!valid || !imgFile) return false;

      const token = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user'))['accessToken'] : null

      if (imgFile.length) {
        // imgFile.forEach(img => {
        const formData = new FormData();
        imgFile.forEach(img => formData.append("img", img, img.name));
        axiosPost('/api/admin/image/upload', formData)
          .then(res => {
            console.log('[Image Uploaded]', res);
            let payload = Object.assign({}, form);
            payload.imageData = [];
            payload.imageData = res.data.imgPaths;
            payload.id = property.id;
            dispatch(actionPropertyUpdate(payload));
            history.push('/admin/properties');
          }).catch(err => {
            console.log('[Image Upload Fail]', err);
          })
        // })
      } else {
        let payload = Object.assign({}, form);
        delete payload.imageData;
        payload.id = property.id;
        dispatch(actionPropertyUpdate(payload));
        history.push('/admin/properties');
        return;
      }

    });
  }

  return (
    <div className="d-flex flex-column justify-content-center align-items-center overflow-hidden">
      <div style={{ width: '80%' }}>
        <Fade bottom delay={200}>
          <Form ref={formRef} model={form} rules={rules} labelWidth="100" className="login-ruleForm d-font-bold" labelPosition={"top"} style={{ border: "2px solid #03ffa4", margin: 20, borderRadius: 10 }}>
            <Layout.Row style={{ fontSize: 25, margin: "-1px 0px 15px 0px" }}>
              <Layout.Col span="24">
                <div className="grid-content d-content-highlight d-flex" style={{ borderRadius: "10px 10px 1px 1px" }}>
                  <div className="ms-3">Property Detail</div>
                  <div className="ms-auto me-3 d-flex align-items-center">
                    <img src="imgs/logo3.png" alt='logo' style={{ height: "35px" }} />
                  </div>
                </div>
              </Layout.Col>
            </Layout.Row>


            <div className="container-fluid">
              <h3 className="my-3 text-white">Property Highlights</h3>
              <div className="row">

                <div className="col-md-3 mt-4">
                  <div className="bg-white d-flex rounded justify-content-center align-items-center position-relative overflow-hidden d-inline-block w-100" style={{ height: 150 }}>
                    {
                      <Carousel indicators={true} >
                        {property.imageData?.map((img) => (
                          <Carousel.Item interval={5000} key={img}>
                            <img src={`${process.env.REACT_APP_API_ENDPOINT}/public/${img}`} alt="img" width="100%" height="100%" />
                          </Carousel.Item>
                        ))}
                        {imgFile.map(img =>
                          <Carousel.Item interval={5000} key={img}>
                            <img src={URL.createObjectURL(img)} alt="img" width="100%" height="100%" />
                          </Carousel.Item>
                        )
                        }
                      </Carousel>
                    }
                    <input type="file" onChange={onFileChange} className="position-absolute top-0 left-0 opacity-0 w-100 h-100 cursor-pointer" />
                  </div>
                </div>
                <div className="col-md-9 mt-4">
                  <Form.Item label="Address1" prop="address1">
                    <Input type="text" value={form.address1} onChange={val => onFormChange('address1', val)} />
                  </Form.Item>
                  <Form.Item label="Address2" prop="address2">
                    <Input type="text" value={form.address2} onChange={val => onFormChange('address2', val)} />
                  </Form.Item>
                </div>

                {/* ************************** Row 2 ***************************** */}
                <div className="col-md-3 mt-4">
                  <Form.Item label="Construction Year" prop="constructionYear">
                    <Input type="number" value={form.constructionYear} onChange={val => onFormChange('constructionYear', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Price" prop="assetPrice">
                    <Input type="number" value={form.assetPrice} onChange={val => onFormChange('assetPrice', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Type" prop="propertyType">
                    <Select className="w-100" value={form.propertyType} onChange={val => onFormChange('propertyType', val)}>
                      {
                        typeOptions.map(item => <Select.Option value={item.key} label={item.label}>{item.label}</Select.Option>)
                      }
                    </Select>
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Bedroom/Bath" prop="bedroomOrBath">
                    <Input type="number" value={form.bedroomOrBath} onChange={val => onFormChange('bedroomOrBath', val)} />
                  </Form.Item>
                </div>

                {/* **************************** Row 3 ******************************* */}
                <div className="col-md-3 mt-4">
                  <Form.Item label="Square Feet" prop="squareFeet">
                    <Input type="number" value={form.squareFeet} onChange={val => onFormChange('squareFeet', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Lot Size" prop="lotSize">
                    <Input type="number" value={form.lotSize} onChange={val => onFormChange('lotSize', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Neighborhood" prop="neighborhood">
                    <Input type="text" value={form.neighborhood} onChange={val => onFormChange('neighborhood', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Section 8" prop="section8">
                    <Select className="w-100" value={form.section8} onChange={val => onFormChange('section8', val)}>
                      {
                        section8Options.map(item => <Select.Option value={item.key} label={item.label}>{item.label}</Select.Option>)
                      }
                    </Select>
                  </Form.Item>
                </div>

                <div className="col-md-12"><hr style={{ color: 'white' }} /></div>

                {/* **************************** Row 4 ******************************* */}
                <div className="col-md-3 mt-4">
                  <Form.Item label="Rent Starts From" prop="rentStartsDate">
                    <Input type="date" value={form.rentStartsDate} onChange={val => onFormChange('rentStartsDate', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Current Status" prop="currentStatusOfProperty">
                    <Select className="w-100" value={form.currentStatusOfProperty} onChange={val => onFormChange('currentStatusOfProperty', val)}>
                      {
                        currentStatusOptions.map(item => <Select.Option value={item.key} label={item.label}>{item.label}</Select.Option>)
                      }
                    </Select>
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Utilities" prop="utility">
                    <Select className="w-100" value={form.utility} onChange={val => onFormChange('utility', val)}>
                      {
                        utilityOptions.map(item => <Select.Option value={item.key} label={item.label}>{item.label}</Select.Option>)
                      }
                    </Select>
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Maintain Reserve" prop="initMaintainanceReserve">
                    <Input type="number" value={form.initMaintainanceReserve} onChange={val => onFormChange('initMaintainanceReserve', val)} />
                  </Form.Item>
                </div>

                {/* **************************** Row 5 ******************************* */}
                <div className="col-md-12"><hr style={{ color: 'white' }} /></div>
                <div className="col-md-6 mt-4">
                  <Form.Item label="Monthly Gross Rent" prop="monthlyGrossRent">
                    <Input type="number" value={form.monthlyGrossRent} onChange={val => onFormChange('monthlyGrossRent', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Tax" prop="tax">
                    <Input type="number" value={form.tax} onChange={val => onFormChange('tax', val)} />
                  </Form.Item>
                </div>

                <div className="col-md-3 mt-4">
                  <Form.Item label="Insurance" prop="insuranceFee">
                    <Input type="number" value={form.insuranceFee} onChange={val => onFormChange('insuranceFee', val)} />
                  </Form.Item>
                </div>

                {/* **************************** Row 6 ******************************* */}
                <div className="col-md-3 mt-4">
                  <Form.Item label="Fee" prop="fee">
                    <Input type="number" value={form.fee} onChange={val => onFormChange('fee', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Monthly Cost" prop="monthlyCosts">
                    <Input type="number" value={form.monthlyCosts} onChange={val => onFormChange('monthlyCosts', val)} disabled />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Property Manage Fee" prop="propertyManagementFee">
                    <Input type="text" value={form.propertyManagementFee} onChange={val => onFormChange('propertyManagementFee', val)} disabled />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Platform Fee" prop="platformFee">
                    <Input type="text" value={form.platformFee} onChange={val => onFormChange('platformFee', val)} disabled />
                  </Form.Item>
                </div>

                {/* **************************** Row 7 ******************************* */}
                <div className="col-md-12"><hr style={{ color: 'white' }} /></div>
                <div className="col-md-6 mt-4">
                  <Form.Item label="Token Amount" prop="generatedToken">
                    <Input type="number" value={form.generatedToken} onChange={val => onFormChange('generatedToken', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Month Rent Per Token" prop="monthlyRentPerToken">
                    <Input type="number" value={form.monthlyRentPerToken} onChange={val => onFormChange('monthlyRentPerToken', val)} disabled />
                  </Form.Item>
                </div>
                <div className="col-md-3 mt-4">
                  <Form.Item label="Token Value" prop="tokenValue">
                    <Input type="number" value={form.tokenValue} onChange={val => onFormChange('tokenValue', val)} disabled />
                  </Form.Item>
                </div>
                {/* **************************** Row 8 ******************************* */}
                <div className="col-md-12"><hr style={{ color: 'white' }} /></div>
                <div className="col-md-4 mt-4">
                  <Form.Item label="basic" prop="basic">
                    <Input type="number" value={form.basic} onChange={val => onFormChange('basic', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-4 mt-4">
                  <Form.Item label="gold" prop="gold">
                    <Input type="number" value={form.gold} onChange={val => onFormChange('gold', val)} />
                  </Form.Item>
                </div>
                <div className="col-md-4 mt-4">
                  <Form.Item label="premium" prop="premium">
                    <Input type="number" value={form.premium} onChange={val => onFormChange('premium', val)} />
                  </Form.Item>
                </div>
              </div>
            </div>

            <Form.Item style={{ textAlign: "center" }}>
              <Button type="primary" nativeType="submit" onClick={onSubmit}>Update</Button>
            </Form.Item>
          </Form>
        </Fade>
      </div>
    </div>
  )
}

export default AdminPropertyUpdate;